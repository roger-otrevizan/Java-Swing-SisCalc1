package siscalci;

import java.awt.event.KeyEvent;
import static java.awt.image.ImageObserver.WIDTH;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;
import static siscalci.TelaInicial.translate;

public class Integrais extends javax.swing.JFrame {

    //
    double n, // Essa variavel é igual ao expoente (n)
            termo, // Essa variável é igual ao termo do polinômio
            n1, termo1,
            n2, termo2,
            n3, termo3,
            n4, termo4,
            n5, termo5,
            n6, termo6,
            n7, termo7,
            simplifica, simplifica1, simplifica2, simplifica3, simplifica4, simplifica5, simplifica6, simplifica7,
            soma, soma1, soma2, soma3, soma4, soma5, soma6, soma7,
            sub, sub1, sub2, sub3, sub4, sub5, sub6, sub7;

    public Integrais() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        lbInfo = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAmostra = new javax.swing.JTextArea();
        lbResult = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btCos = new javax.swing.JButton();
        btSen = new javax.swing.JButton();
        btMenos = new javax.swing.JButton();
        btMais = new javax.swing.JButton();
        btN = new javax.swing.JButton();
        btX = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btCalcular = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        lblTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Integral");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 204, 204));

        jPanel3.setBackground(new java.awt.Color(255, 204, 204));

        lbInfo.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lbInfo.setForeground(new java.awt.Color(102, 0, 0));
        lbInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbInfo.setText("Entre com os dados dessa forma: ax^n ou ax^n(+ ou -)ax^n.");

        txtAmostra.setColumns(20);
        txtAmostra.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        txtAmostra.setForeground(new java.awt.Color(102, 0, 0));
        txtAmostra.setRows(5);
        txtAmostra.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAmostraKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtAmostra);

        lbResult.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        lbResult.setForeground(new java.awt.Color(102, 0, 0));
        lbResult.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Resultado", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Cambria Math", 0, 11), new java.awt.Color(102, 0, 0))); // NOI18N

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        btCos.setBackground(new java.awt.Color(255, 255, 255));
        btCos.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btCos.setForeground(new java.awt.Color(102, 0, 0));
        btCos.setText("cosx");
        btCos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCosActionPerformed(evt);
            }
        });
        jPanel1.add(btCos);

        btSen.setBackground(new java.awt.Color(255, 255, 255));
        btSen.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btSen.setForeground(new java.awt.Color(102, 0, 0));
        btSen.setText("senx");
        btSen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btSen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSenActionPerformed(evt);
            }
        });
        jPanel1.add(btSen);

        btMenos.setBackground(new java.awt.Color(255, 255, 255));
        btMenos.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btMenos.setForeground(new java.awt.Color(102, 0, 0));
        btMenos.setText("-");
        btMenos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMenosActionPerformed(evt);
            }
        });
        jPanel1.add(btMenos);

        btMais.setBackground(new java.awt.Color(255, 255, 255));
        btMais.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btMais.setForeground(new java.awt.Color(102, 0, 0));
        btMais.setText("+");
        btMais.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btMais.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMaisActionPerformed(evt);
            }
        });
        jPanel1.add(btMais);

        btN.setBackground(new java.awt.Color(255, 255, 255));
        btN.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btN.setForeground(new java.awt.Color(102, 0, 0));
        btN.setText("^");
        btN.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNActionPerformed(evt);
            }
        });
        jPanel1.add(btN);

        btX.setBackground(new java.awt.Color(255, 255, 255));
        btX.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btX.setForeground(new java.awt.Color(102, 0, 0));
        btX.setText("x");
        btX.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXActionPerformed(evt);
            }
        });
        jPanel1.add(btX);

        jPanel2.setForeground(new java.awt.Color(102, 0, 0));
        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        btCalcular.setBackground(new java.awt.Color(255, 255, 255));
        btCalcular.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btCalcular.setForeground(new java.awt.Color(102, 0, 0));
        btCalcular.setText("Calcular");
        btCalcular.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCalcularActionPerformed(evt);
            }
        });
        btCalcular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btCalcularKeyPressed(evt);
            }
        });

        btnVoltar.setBackground(new java.awt.Color(255, 255, 255));
        btnVoltar.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btnVoltar.setForeground(new java.awt.Color(102, 0, 0));
        btnVoltar.setText("Voltar");
        btnVoltar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });
        btnVoltar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnVoltarKeyPressed(evt);
            }
        });

        btnLimpar.setBackground(new java.awt.Color(255, 255, 255));
        btnLimpar.setFont(new java.awt.Font("Cambria Math", 0, 14)); // NOI18N
        btnLimpar.setForeground(new java.awt.Color(102, 0, 0));
        btnLimpar.setText("Limpar");
        btnLimpar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });
        btnLimpar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnLimparKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(btCalcular, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(lbResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 258, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btCalcular)
                    .addComponent(btnVoltar)
                    .addComponent(btnLimpar))
                .addContainerGap())
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(35, 35, 35)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(lbResult, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        lblTitulo.setBackground(new java.awt.Color(153, 0, 0));
        lblTitulo.setFont(new java.awt.Font("Cambria Math", 1, 24)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Integrais");
        lblTitulo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lblTitulo.setOpaque(true);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblTitulo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void validarTxt() {
        ((AbstractDocument) txtAmostra.getDocument()).setDocumentFilter(new RandomValidator(25, true, false, true, false, '.', '-',
                '^', '+'));

        /* Na ordem: 

         Número máximo de caracteres 
         Permite números 
         Valida ponto flutuante (1.50, por exemplo) 
         Permite letras 
         Permite todos os caracteres especias 
         Caracteres especiais permitidos (pode passar quantos quiser como parâmetro, note que no exemplo permite '.' e '-'
         */
    }

    public void calculaIntegral() {
        //Limitar o txtArea para receber apenas 24 caracteres, valor será diferente no caso do seno e cosseno
        String[] amostra = txtAmostra.getText().trim().split("x|X|\\^|\\+|\\-", -1);
        String amos = txtAmostra.getText().trim();

        String aux = "";

        //INTEGRAL DO COSSENO
        if (amos.equalsIgnoreCase("cosx")) {
            lbResult.setText(String.format("<html>F(x) = senx<html>"));

            //INTEGRAL DO SENO
        } else if (amos.equalsIgnoreCase("senx")) {
            lbResult.setText(String.format("<html>F(x) = -cosx<html>"));

            //INTEGRAL DO -COSSENO    
        } else if (amos.equalsIgnoreCase("-cosx")) {
            lbResult.setText("<html>F(x) = -senx<html>");

            //INTEGRAL DO -SENO    
        } else if (amos.equalsIgnoreCase("-senx")) {
            lbResult.setText("<html>F(x) = +cosx<html>");

            /// INTEGRAL COM 1 POLINÔMIO
        } else if (amostra.length == 3) {

            //Iteração para pegar o 1º termo e o 1º expoente
            for (int i = 0; i < amostra.length; i++) {
                termo = Double.parseDouble(amostra[0]);
                n = Double.parseDouble(amostra[2]) + 1;
            }

            //Se o 1º termo for divisível pelo 1º expoente e ambos forem iguais, então deixe só x
            if (((termo % n) == 0) && (termo == n)) {
                String resultado = "(" + "x^" + String.valueOf(n) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                //Senão se o 1º termo for divisível pelo 1º expoente e ambos forem diferentes, então faça a simplificação
            } else if (((termo % n) == 0) && (termo != n)) {
                simplifica = termo / n;

                String resultado = "(" + String.valueOf(simplifica) + "x^" + String.valueOf(n) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                //Senão imprima o resultado normal na tela
            } else {
                String resultado = "(" + "(" + String.valueOf(termo) + "x^" + String.valueOf(n) + ")"
                        + "/" + String.valueOf(n) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));
            }
            /// INTEGRAL COM 1 POLINÔMIO
        } else if (amostra.length == 4) {

            //Iteração para pegar o 1º termo e o 1º expoente
            for (int i = 0; i < amostra.length; i++) {
//                if ( amostra[0] == "-" ){
                termo = -Double.parseDouble(amostra[1]);
                n = Double.parseDouble(amostra[3]) + 1;
//                }
            }

            //Se o 1º termo for divisível pelo 1º expoente e ambos forem iguais, então deixe só x
            if (((termo % n) == 0) && (termo == n)) {
                String resultado = "(" + "x^" + String.valueOf(n) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                //Senão se o 1º termo for divisível pelo 1º expoente e ambos forem diferentes, então faça a simplificação
            } else if (((termo % n) == 0) && (termo != n)) {
                simplifica = termo / n;

                String resultado = "(" + String.valueOf(simplifica) + "x^" + String.valueOf(n) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                //Senão imprima o resultado normal na tela
            } else {
                String resultado = "(" + "(" + String.valueOf(termo) + "x^" + String.valueOf(n) + ")"
                        + "/" + String.valueOf(n) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));
            }
            /// INTEGRAL DA SOMA - 2 POLINÔMIOS
        } else if (amostra.length == 6 && (amos.indexOf('+') >= 0)) {

            //Iteração para pegar o 1º e 2º termo e o 1º e 2º expoente
            for (int i = 0; i < amostra.length; i++) {
                termo = Double.parseDouble(amostra[0]);
                n = Double.parseDouble(amostra[2]) + 1;
                termo1 = Double.parseDouble(amostra[3]);
                n1 = Double.parseDouble(amostra[5]) + 1;
            }

            //Se os expoentes forem iguais    
            if (n == n1) {
                soma = termo + termo1; //Some os termos
                //Se a soma dos termos for divisível pelo expoente e ambos forem iguais, exiba x
                if (((soma % n) == 0) && (soma == n)) {
                    String resultado = "(" + "x^" + String.valueOf(n) + ")" + " + c ";
                    lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                } else if (((soma % n) == 0) && (soma != n)) {
                    simplifica1 = soma / n;

                    String resultado = "(" + String.valueOf(simplifica1) + "x^" + String.valueOf(n) + ")" + " + c ";
                    lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                } else if ((soma % n) != 0) {
                    String resultado = "(" + "(" + String.valueOf(soma) + "x^" + String.valueOf(n) + ")"
                            + "/" + String.valueOf(n) + ")" + " + c ";
                    lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));
                }
                //Senão imprima o resultado normal na tela
            } else {
                String resultado = "(" + "(" + String.valueOf(termo) + "x^" + String.valueOf(n) + ")"
                        + "/" + String.valueOf(n) + ")" + '+'
                        + "(" + "(" + String.valueOf(termo1) + "x^" + String.valueOf(n1) + ")"
                        + "/" + String.valueOf(n1) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));
            }

            /// INTEGRAL DA SUBTRAÇÃO - 2 POLINÔMIOS
        } else if (amostra.length == 6 && (amos.indexOf('-') >= 0)) {

            //Iteração para pegar o 1º e 2º termo e o 1º e 2º expoente
            for (int i = 0; i < amostra.length; i++) {
                termo = Double.parseDouble(amostra[0]);
                n = Double.parseDouble(amostra[2]) + 1;
                termo1 = Double.parseDouble(amostra[3]);
                n1 = Double.parseDouble(amostra[5]) + 1;
            }

            //Se os expoentes forem iguais    
            if (n == n1) {
                sub = termo - termo1; //Subtraia os termos
                //Se a subtração dos termos for divisível pelo expoente e ambos forem iguais, exiba x
                if (((sub % n) == 0) && (sub == n)) {
                    String resultado = "(" + "x^" + String.valueOf(n) + ")" + " + c ";
                    lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                } else if (((sub % n) == 0) && (sub != n)) {
                    simplifica1 = sub / n;

                    String resultado = "(" + String.valueOf(simplifica1) + "x^" + String.valueOf(n) + ")" + " + c ";
                    lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));

                } else {
                    String resultado = "(" + "(" + String.valueOf(sub) + "x^" + String.valueOf(n) + ")"
                            + "/" + String.valueOf(n) + ")" + " + c ";
                    lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));
                }
                //Senão imprima o resultado normal na tela
            } else {
                String resultado = "(" + "(" + String.valueOf(termo) + "x^" + String.valueOf(n) + ")"
                        + "/" + String.valueOf(n) + ")" + '-'
                        + "(" + "(" + String.valueOf(termo1) + "x^" + String.valueOf(n1) + ")"
                        + "/" + String.valueOf(n1) + ")" + " + c ";
                lbResult.setText(String.format("<html>F(x) = " + resultado + "<html>"));
            }

            //SENÃO MENSAGEM DE ERRO
        } else {
            if (translate == true) {
                lbResult.setText("<html>&nbsp;&nbsp;Invalid input data! Please enter the data correctly.</html>");
            } else {
                lbResult.setText("<html>&nbsp;&nbsp;Entrada de dados inválida! Por favor entre com os dados corretamente.</html>");
            }
//            lbResult.setText(String.valueOf(amostra.length));
        }
        validarTxt();
        pack();
        setLocationRelativeTo(null);
    }

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        if (translate == true) {
            new TelaInicial().setVisible(true);
            translate = true;
        } else {
            new TelaInicial().setVisible(true);
        }
        dispose();
    }//GEN-LAST:event_btnVoltarActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
//      Limpar a tela
        txtAmostra.setText("");
        lbResult.setText("");
        txtAmostra.requestFocus();
        pack();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void btCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCalcularActionPerformed
        calculaIntegral();
        pack();
    }//GEN-LAST:event_btCalcularActionPerformed

    private void btMaisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMaisActionPerformed
        txtAmostra.setText(txtAmostra.getText() + btMais.getText());
        txtAmostra.requestFocus();
    }//GEN-LAST:event_btMaisActionPerformed

    private void btXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXActionPerformed
        txtAmostra.setText(txtAmostra.getText() + btX.getText());
        txtAmostra.requestFocus();
    }//GEN-LAST:event_btXActionPerformed

    private void btNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNActionPerformed
        txtAmostra.setText(txtAmostra.getText() + btN.getText());
        txtAmostra.requestFocus();
    }//GEN-LAST:event_btNActionPerformed

    private void btMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMenosActionPerformed
        txtAmostra.setText(txtAmostra.getText() + btMenos.getText());
        txtAmostra.requestFocus();
    }//GEN-LAST:event_btMenosActionPerformed

    private void btSenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSenActionPerformed
        txtAmostra.setText(txtAmostra.getText() + btSen.getText());
        txtAmostra.requestFocus();
    }//GEN-LAST:event_btSenActionPerformed

    private void btCosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCosActionPerformed
        txtAmostra.setText(txtAmostra.getText() + btCos.getText());
        txtAmostra.requestFocus();
    }//GEN-LAST:event_btCosActionPerformed

    private void btCalcularKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btCalcularKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            calculaIntegral();
            validarTxt();
            pack();
            setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_btCalcularKeyPressed

    private void btnVoltarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnVoltarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (translate == true) {
                new TelaInicial().setVisible(true);
                translate = true;
            } else {
                new TelaInicial().setVisible(true);
            }
            dispose();
        }
    }//GEN-LAST:event_btnVoltarKeyPressed

    private void btnLimparKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnLimparKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//      Limpar a tela
            txtAmostra.setText("");
            lbResult.setText("");
            txtAmostra.requestFocus();
            pack();
        }
    }//GEN-LAST:event_btnLimparKeyPressed

    private void txtAmostraKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAmostraKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            calculaIntegral();
            validarTxt();
            pack();
            setLocationRelativeTo(null);
        }
    }//GEN-LAST:event_txtAmostraKeyPressed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if (translate == true) {
            lblTitulo.setText("Integral");
            lbInfo.setText("Enter the data this way: ax^n or ax^n(+ or -)ax^n.");
            btSen.setText("sinx");
            lbResult.setBorder(BorderFactory.createTitledBorder(null, "Additional Informations", WIDTH, WIDTH, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(102, 0, 0)));
            btCalcular.setText("Calculate");
            btnLimpar.setText("Clean");
            btnVoltar.setText("Return");
            pack();
        }

        validarTxt();
        pack();
        setLocationRelativeTo(null);
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Integrais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Integrais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Integrais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Integrais.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Integrais().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCalcular;
    private javax.swing.JButton btCos;
    private javax.swing.JButton btMais;
    private javax.swing.JButton btMenos;
    private javax.swing.JButton btN;
    private javax.swing.JButton btSen;
    private javax.swing.JButton btX;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JLabel lbResult;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextArea txtAmostra;
    // End of variables declaration//GEN-END:variables
}
